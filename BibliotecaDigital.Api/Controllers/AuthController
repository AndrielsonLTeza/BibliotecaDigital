using System.Threading.Tasks;
using BibliotecaDigital.Core.DTOs;
using BibliotecaDigital.Core.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BibliotecaDigital.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IUsuarioService _usuarioService;
        private readonly IPasswordHashService _passwordHashService;
        private readonly ITokenService _tokenService;
        
        public AuthController(
            IUsuarioService usuarioService,
            IPasswordHashService passwordHashService,
            ITokenService tokenService)
        {
            _usuarioService = usuarioService;
            _passwordHashService = passwordHashService;
            _tokenService = tokenService;
        }
        
        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> Login([FromBody] LoginDto model)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
                
            // Buscar usuário pelo email
            var usuario = await _usuarioService.ObterUsuarioPorEmail(model.Email);
            if (usuario == null)
                return Unauthorized("Usuário ou senha inválidos");
                
            // Verificar senha
            if (!_passwordHashService.VerifyPassword(model.Senha, usuario.Senha))
                return Unauthorized("Usuário ou senha inválidos");
                
            // Gerar token JWT
            var token = _tokenService.GenerateToken(usuario);
            
            return Ok(new { token });
        }
    }
}

