using System.Threading.Tasks;
using BibliotecaDigital.Core.DTOs;
using BibliotecaDigital.Core.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace BibliotecaDigital.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly IPasswordHashService _passwordHashService;
        private readonly ITokenService _tokenService;

        public AuthController(
            IUserService userService,
            IPasswordHashService passwordHashService,
            ITokenService tokenService)
        {
            _userService = userService;
            _passwordHashService = passwordHashService;
            _tokenService = tokenService;
        }

        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> Login([FromBody] LoginDto model)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var user = await _userService.GetUserByEmail(model.Email);
            if (user == null || !_passwordHashService.VerifyPassword(model.Senha, user.Senha))
                return Unauthorized("Usuário ou senha inválidos");

            var token = _tokenService.GenerateToken(user);
            return Ok(new { token });
        }

        [HttpGet("me")]
        [Authorize]
        public async Task<IActionResult> GetMe()
        {
            var user = await _userService.GetUserFromClaims(User);
            if (user == null)
                return NotFound("Usuário não encontrado");

            return Ok(new
            {
                user.Id,
                user.Nome,
                user.Email,
                user.UserName,
                user.Role
            });
        }
    }
}
